#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>



#define PHILOSOPHE 17
pthread_mutex_t baguette[PHILOSOPHE];


void* mange(int id){
  

  for(int i=0; i<2; i++){
    sleep(1);
  }
    //il bouffe
  return NULL;
}

void* philo(void* a){

  int id = (int) a;
  int left = id;
  int right = id+1 % PHILOSOPHE;

  while(1){
    printf("%d: pense\n", id);
    if(left<right) {
      pthread_mutex_lock (&baguette[right]);
      printf("%d: possede la gauche\n", id);
      
      pthread_mutex_lock (&baguette[left]);
      printf("%d: possede la droite\n", id);
    }
    else{      
      pthread_mutex_lock (&baguette[left]);
      printf("%d: possede la gauche\n", id);
      
      pthread_mutex_lock (&baguette[right]);
      printf("%d: possede la droite\n", id);
    }
    printf("le philosophe [%d] mange avec les baguettes %d et %d\n", id, left, right);
    mange(id);
    
    pthread_mutex_unlock( &baguette[left]);
    printf("%d: libere gauche\n", id);
    
    pthread_mutex_unlock( &baguette[left]);
    printf("%d: libere droite\n", id);

    pthread_mutex_unlock( &baguette[right]);			     
  }

  return NULL;
}


int main(){
  
  pthread_t P[PHILOSOPHE];
  int i;
 
   while(1){
    for(i = 0; i<PHILOSOPHE; i++)
      pthread_create(&P[i], NULL, philo, (void*)i);
    
    for(i = 0; i<PHILOSOPHE; i++);
    pthread_join(P[i], NULL);
   }
  return 0;
}

//actions semantiques

primary_expression
: IDENTIFIER                                            
| CONSTANT                                              
| '(' expression ')'                                      
| IDENTIFIER '(' ')'                                      
| IDENTIFIER '(' argument_expression_list ')'              
| IDENTIFIER INC_OP                                    
| IDENTIFIER DEC_OP                                        


postfix_expression
: primary_expression
| postfix_expression '[' expression ']'        


argument_expression_list
: expression                                    
| argument_expression_list ',' expression


unary_expression
: postfix_expression                            
| INC_OP unary_expression
| DEC_OP unary_expression                        
| unary_operator unary_expression                


unary_operator
: '*'                            
| '+'  
| '-'


multiplicative_expression
: unary_expression                                            
| multiplicative_expression '*' unary_expression  
| multiplicative_expression '|' unary_expression                  


additive_expression
: multiplicative_expression
| additive_expression '+' multiplicative_expression              
| additive_expression '-' multiplicative_expression                


comparison_expression
: additive_expression
| additive_expression '<' additive_expression
| additive_expression '>' additive_expression          
| additive_expression LE_OP additive_expression    
| additive_expression GE_OP additive_expression
| additive_expression EQ_OP additive_expression            
| additive_expression NE_OP additive_expression            


expression
: unary_expression assignment_operator comparison_expression            
| comparison_expression                                            


assignment_operator
: '='
| MUL_ASSIGN
| ADD_ASSIGN
| SUB_ASSIGN


declaration
: type_name declarator_list ';'


declarator_list
: declarator                            
| declarator_list ',' declarator


type_name
: VOID
| INT
| FLOAT


declarator
: IDENTIFIER
| '(' declarator ')'
| declarator '[' CONSTANT ']'                  
| declarator '[' ']'
| declarator '(' {T=nouvelle_table(T);}parameter_list ')'
| declarator '(' ')'          


parameter_list
: parameter_declaration
| parameter_list ',' parameter_declaration


parameter_declaration
: type_name declarator


statement
: compound_statement
| expression_statement
| selection_statement
| iteration_statement
| jump_statement


compound_statement
: '{' '}'                                              
| '{' {T=nouvelle_table(T);} statement_list '}'                              
| '{' {T=nouvelle_table(T);}declaration_list statement_list '}'              


declaration_list
: declaration                            
| declaration_list declaration          


statement_list
: statement
{
  $<data.code>$=$<data.code>1;
}
| statement_list statement
{
  $<data.code>$=malloc(1+strlen($<data.code>1)+1+1+strlen($<data.code>2));
  sprintf($<data.code>$,"%s %s",$<data.code>1,$<data.code>2);
  free($<data.code>2);
  free($<data.code>1);
}
;

expression_statement
: ';'  
| expression ';'      


selection_statement
: IF '(' expression ')' statement
| IF '(' expression ')' statement ELSE statement    



iteration_statement
: WHILE '(' expression ')' statement        


jump_statement
: RETURN ';'                      
| RETURN expression ';'


program
: external_declaration                
| program external_declaration


external_declaration
: function_definition          
| declaration


function_definition
: type_name declarator {

Afficher ses arguments:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <unistd.h>

int main(int argc, char *argv[]){
  ssize_t retour;
  int i;
  size_t len;
  
  for(i = 1;i <argc; i++)
    {
      len = strlen(argv[i]);
      retour = write(STDOUT_FILENO, argc[i],len);
      if(retour == -1){
	perror("write");
	return EXIT_FAILURE;
      }
      else if (retour != len ){
	frpintf(stderr, "²s n'a pas ete ecrit en entier \n",argv[i]);
	return EXIT_FAILURE;
      }
    }
  return EXIT_SUCCESS;
}

--------------------------------------------------------------------------
Ecrire le contenu mémoire d'un entier et le nombre d'octets ecrit au premier 
appel:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <unistd.h>

int main(int argc, char *argv[]){
  ssize_t retour;
  ssize_t retour2;
  int i;
  size_t len;
  long w = 5;
  retour = write(STDOUT_FILENO, &w,sizeof(long));
      if(retour == -1){
	perror("write");
	return EXIT_FAILURE;
      }
      else if (retour != sizeof(long) ){
	fprintf(stderr, "%s n'a pas ete ecrit en entier \n",w);
	return EXIT_FAILURE;
      }
  retour2 = write(STDOUT_FILENO, &retour,sizeof(ssize_t));
      if(retour == -1){
	perror("write");
	return EXIT_FAILURE;
      }
      else if (retour2 != sizeof(ssize_t )){
	fprintf(stderr, "%s n'a pas ete ecrit en entier \n",retour);
	return EXIT_FAILURE;
      }
  return EXIT_SUCCESS;
}

--------------------------------------------------------------------------------
Affichage du type de l'entrée standard

#include <stdio.h>
#include <stdlib.h>

#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>


int main(int argc, char *argv[]){

           struct stat sb;
           if (fstat(STDIN_FILENO, &sb) == -1) {
               perror("fstat");
               exit(EXIT_FAILURE);
           }

           printf("Type de fichier :                  ");
	   int m = sb.st_mode;

	   if(S_ISREG(m))
	     printf("fichier ordinaire \n");
	   else if(S_ISDIR(m))
	     printf("repertoire \n");
	   else if(S_ISCHR(m))
	     printf("peripherique caractere \n");
	   else if(S_ISBLK(m))
	     printf("peripherique bloc \n");
	   else if(S_ISFIFO(m))
	     printf("fifo \n");
	   else if(S_ISLNK(m))
	     printf("lien symbolique \n");
	   else if(S_ISSOCK(m))
	     printf("socket \n");

  return EXIT_SUCCESS;
}

------------------------------------------------------------------------------
Lit sur son entrée ce qui est ecrit par write_number et l'affiche

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <unistd.h>


int main(int argc, char *argv[]){
  ssize_t retour;
  size_t len = 256;
  long buf;
  retour = read(STDIN_FILENO, &buf,sizeof buf);
  if(retour == -1){
    perror("write");
    return EXIT_FAILURE;
  }
  else if (retour != len ){
    fprintf(stderr, "%d n'a pas ete lu en entier \n",buf);
    return EXIT_FAILURE;
  }  

return EXIT_SUCCESS;
}

------------------------------------------------------------------------------
Ecriture et lecture pour une structure


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <unistd.h>

struct nopad {
char c;
long l;
};

int main(int argc, char *argv[]){
  ssize_t retour;
  ssize_t retour2;
  int i;
  size_t len;
  struct nopad w;
  w.c ='a';
  w.l = 5;
  retour = write(STDOUT_FILENO, &w,sizeof w);
      if(retour == -1){
	perror("write");
	return EXIT_FAILURE;
      }
      else if (retour != sizeof(long) ){
	fprintf(stderr, "%s n'a pas ete ecrit en entier \n",w);
	return EXIT_FAILURE;
      }
  retour2 = write(STDOUT_FILENO, &retour,sizeof(ssize_t));
      if(retour == -1){
	perror("write");
	return EXIT_FAILURE;
      }
      else if (retour2 != sizeof(ssize_t )){
	fprintf(stderr, "%s n'a pas ete ecrit en entier \n",retour);
	return EXIT_FAILURE;
      }
  return EXIT_SUCCESS;
}


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <unistd.h>

struct nopad {
char c;
long l;
};

int main(int argc, char *argv[]){
  ssize_t retour;
  size_t len = 256;
  struct nopad buf;
  retour = read(STDIN_FILENO, &buf,sizeof buf);
  if(retour == -1){
    perror("write");
    return EXIT_FAILURE;
  }
  else if (retour != len ){
    fprintf(stderr, "%d n'a pas ete lu en entier \n",buf);
    return EXIT_FAILURE;
  }  

return EXIT_SUCCESS;
}

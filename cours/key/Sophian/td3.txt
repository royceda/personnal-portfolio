Affiche des chaines avec un temps d'attente entre les deux:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define CHAINE1 "Debut\n"
#define CHAINE2 "Fin"

int
main(void) {
    int out1 = 1;
    int out2 = 1;
    FILE *fout1 = stdout;
    FILE *fout2 = stdout;
    
#ifdef UTILISER_SORTIE_ERREUR1 // compiler avec -DUTILISER_SORTIE_ERREUR1
    out1 = 2;
    fout1 = stderr;
#endif
    
#ifdef UTILISER_SORTIE_ERREUR2
    out2 = 2;
    fout2 = stderr;
#endif
    
#ifdef UTILISER_FPRINTF1
    fprintf( fout1, "%s", CHAINE1);
#else
    write( out1, CHAINE1, strlen(CHAINE1));
#endif /* UTILISER_FPRINTF1 */
    
    sleep(1);
    
#ifdef UTILISER_FPRINTF2
    fprintf( fout2, "%s", CHAINE2);
#else
    write( out2, CHAINE2, strlen(CHAINE2));
#endif /* UTILISER_FPRINTF2 */
    
#ifdef UTILISER_EXIT
    _exit(EXIT_SUCCESS);
#else
    exit(EXIT_SUCCESS);
#endif /* UTILISER__EXIT */
}

---------------------------------------------------------------------------
Le programme affiche son pid, se duplique(fork) et son fils affiche son pid
et celui de son parent:

#include <sys/types.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <unistd.h>

#include <stdio.h>
#include<stdlib.h>

int main(int argc, char**argv){
  int fd,status;
  if (argc<2) return EXIT_FAILURE;

  switch(fork()){
  case -1:
    perror("fork");
    return EXIT_FAILURE;
    break;
  case 0:    
    fd=open("sortie",O_WRONLY|O_CREAT|O_TRUNC,0644);
    if (fd==-1){ perror("sortie"); return EXIT_FAILURE;}
    if (dup2(fd,1)==-1) {perror("dup2"); return EXIT_FAILURE;}
    execvp(argv[1],argv+1);
    perror(argv[1]);
    return EXIT_FAILURE;
    break;
  }
  if (wait(&status)==-1){ perror("wait"); return EXIT_FAILURE;}
  if (WIFEXITED(status))
    printf("fils termine normalement, code de retour: %d\n",WEXITSTATUS(status));
  else{
    if (WIFSIGNALED(status))
      printf("fils termine par signal, numero de signal: %d\n",WTERMSIG(status));      
  }
  return EXIT_SUCCESS;
  
}

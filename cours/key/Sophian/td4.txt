Creer tube (pipe), programme se duplique, le pere ecrit dans le tube, le fils lit READ_MAX char dans le tube:

#include <unistd.h>

#include <stdlib.h>       
#include <stdio.h>     
#include <string.h>

#define READ_MAX 500
#define NB_WRITE 10

int main(int argc, char **argv){
  int pipe_fd[2],n;
  char buffer[READ_MAX];
  const char *message="Hello World";
  size_t msg_len=strlen(message),c;
  ssize_t r;
  
  if (pipe(pipe_fd)==-1) { perror("creation du tube"); return EXIT_FAILURE;} 

  switch(fork()){
  case -1:
    perror("creation du fils"); return EXIT_FAILURE; 
    break;
  case 0:
    /* FILS */
    /* lecture depuis le tube */
    r=read(pipe_fd[0],buffer,READ_MAX);
    if (r==-1) 
      { perror("fils depuis tube"); return EXIT_FAILURE; }
    if (r>0)
      if (write(1,buffer,r)==-1)
	{perror("fils sur stdout"); return EXIT_FAILURE;}
    return EXIT_SUCCESS;
    break;
  }
  /* pere */
  close(pipe_fd[0]); /* MODIF ICI si bloquage quand le pere ecrit plusieur fois sont message */	
  for(n=0;n<NB_WRITE;n++){
    c=0;
    while(c<msg_len){
      r=write(pipe_fd[1],message+c,msg_len-c);
      if (r==-1){ perror("pere sur pipe"); return EXIT_FAILURE;}
      c+=r;
    }
  }
  return EXIT_SUCCESS;
}

---------------------------------------------------------------------------
Le fils lit et met les char en majuscule et les affiche


#include <unistd.h>

#include <ctype.h>
#include <stdlib.h>       
#include <stdio.h>     
#include <string.h>

#define READ_MAX 500

int main(int argc, char **argv){
  int pipe_fd[2];
  char buffer[READ_MAX];
  size_t i;
  ssize_t r;
  
  if (pipe(pipe_fd)==-1) { perror("creation du tube"); return EXIT_FAILURE;} 

  switch(fork()){
  case -1:
    perror("creation du fils"); return EXIT_FAILURE; 
    break;
  case 0:
    /* FILS */
    close(pipe_fd[1]);
    /* lecture depuis le tube */
    r=1;
    while(r!=0){
      r=read(pipe_fd[0],buffer,READ_MAX);
      if (r==-1) 
	{ perror("fils depuis tube"); return EXIT_FAILURE; }
      if (r>0){
	for(i=0;i<r;i++) buffer[i]=toupper(buffer[i]);
	if (write(1,buffer,r)==-1) /* bof */
	  {perror("fils sur stdout"); return EXIT_FAILURE;}
      }
    }
    return EXIT_SUCCESS;
    break;
  }
  /* pere */
  close(pipe_fd[0]); 
  if (dup2(pipe_fd[1],1)==-1){perror("pere dup2"); return EXIT_FAILURE;}  
  close(pipe_fd[1]); 
  execlp("ps","ps",NULL);
  return EXIT_SUCCESS;
}
 ------------------------------------------------------------------------
Écrire un programme qui exécute un pip eline de commandes. Le programme aura 
une variable commandes qui contiendra la liste des commandes à executer, chaque 
commande consiste en un tableau de chaînes de caractères terminé par NULL :

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <sys/wait.h>
#include <unistd.h>

int
main(int argc, char *argv[]) {
    int fds[2];
    int in_next = STDIN_FILENO;
    pid_t pid_enfant;
    pid_t pid;
    int status,i;

    
    char *ls[]={"ls","-l",NULL};
    char *tr[]={"tr","-d","[:blank:]",NULL};    
    char **commandes[]={ls,tr};
    int nb_commandes=sizeof commandes/sizeof(char*);

    for (i=0;i<nb_commandes;i++) {
      fds[0]=fds[1]=-1;

      if (i<nb_commandes-1) {
	/* On n'est pas le dernier processus du pipeline */
	if (pipe(fds) == -1) {
	  perror("pipe");
	  exit(EXIT_FAILURE);
	}
      }
      
      pid_enfant = fork();
      switch (pid_enfant) {
      case -1:
	perror("fork");
	exit(EXIT_FAILURE);
      case 0:
	/* enfant */
	if (in_next != STDIN_FILENO) {
	  /* On n'est pas le premier processus du pipeline */
	  dup2(in_next,STDIN_FILENO);
	  close(in_next);
	}

	if (fds[0]!=-1){
	  /* On n'est pas le dernier processus du pipeline */
	  dup2(fds[1],STDOUT_FILENO);
	  close(fds[0]);
	  close(fds[1]);
	}	
	execvp(commandes[i][0],commandes[i]);
	perror("execvp");
	exit(EXIT_FAILURE);
      }
      /* parent */
      if (in_next != STDIN_FILENO)
	close(in_next);
      if (fds[0]!=-1){
	close(fds[1]);
	in_next = fds[0];
      }
    }
    
    /* On attend le bon enfant */
    do {
      pid = wait(&status);
      if (pid == -1) {
	perror("wait");
	exit(EXIT_FAILURE);
      }
    } while (pid != pid_enfant);
    
    if (WIFEXITED(status))
      return WEXITSTATUS(status);
    else {
      if (WIFSIGNALED(status))
	fprintf(stderr, "Signal %d\n", WTERMSIG(status));
      
      return EXIT_FAILURE;
    }
}

